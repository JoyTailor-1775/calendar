{"version":3,"sources":["interfaces/ModalMode.ts","components/Modal.tsx","helpers/uniqueId.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["ModalMode","Modal","showModal","onCloseModal","onDelete","onSuccess","mode","title","startTime","endTime","date","color","handleChangeModal","Dialog","open","onClose","aria-labelledby","DialogTitle","id","EDIT","DialogContent","style","width","Grid","container","spacing","item","xs","autoFocus","margin","label","type","name","value","onChange","e","target","slice","DatePicker","disableToolbar","variant","format","TimePicker","time","direction","alignItems","htmlFor","className","evt","DialogActions","Button","onClick","uiqueID","Math","random","toString","substr","INITIAL_ACTIVE_EVENT_STATE","Object","freeze","activeEventId","activeEventTitle","activeEventStartTime","Date","activeEventEndTime","activeEventDate","activeEventColor","Calendar","props","calendarComponentRef","React","handleModalFieldChange","val","setState","prevState","addEvent","evtObj","uniqueId","state","start","end","backgroundColor","calendarEvents","concat","deleteEvent","a","find","el","newArr","filter","editEvent","clearActiveEventState","closeModal","showEventModal","submitModal","modalMode","submitDeleteModal","handleDateClick","arg","CREATE","handleEventClick","event","defaultView","height","header","left","center","right","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","ref","this","events","dateClick","eventClick","editable","Boolean","window","location","hostname","match","ReactDOM","render","utils","DateFnsUtils","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.693b54eb.chunk.js","sourcesContent":["enum ModalMode {\n  EDIT = 'edit',\n  CREATE = 'create',\n}\n\nexport default ModalMode;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Input from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport './Modal.scss';\n\nimport { TimePicker, DatePicker } from '@material-ui/pickers';\nimport ModalMode from '../interfaces/ModalMode';\n\ninterface ModalProps {\n  onCloseModal: () => void;\n  onSuccess: () => void;\n  onDelete: () => void;\n  handleChangeModal: (value: any, name: string) => void;\n  showModal: boolean;\n  mode?: ModalMode;\n  title?: string;\n  startTime: Date | string;\n  date: Date | string;\n  endTime: Date | string;\n  color: string;\n}\n\nconst Modal: React.SFC<ModalProps> = ({\n  showModal,\n  onCloseModal,\n  onDelete,\n  onSuccess,\n  mode,\n  title,\n  startTime,\n  endTime,\n  date,\n  color,\n  handleChangeModal,\n}: ModalProps) => {\n  return (\n    <Dialog open={showModal} onClose={onCloseModal} aria-labelledby=\"form-dialog-title\">\n      <DialogTitle id=\"form-dialog-title\">\n        {mode && mode === ModalMode.EDIT ? 'Edit Event' : 'New Event'}\n      </DialogTitle>\n      <DialogContent style={{ width: 300 }}>\n        <Grid container spacing={1}>\n          <Grid container item xs={12} spacing={3}>\n            <Input\n              autoFocus\n              margin=\"dense\"\n              id=\"title\"\n              label=\"Event title\"\n              type=\"text\"\n              name=\"activeEventTitle\"\n              value={title}\n              onChange={(e) => {\n                handleChangeModal(e.target.value.slice(0, 30), 'activeEventTitle');\n              }}\n            />\n          </Grid>\n          <Grid container item xs={12} spacing={3}>\n            <DatePicker\n              disableToolbar\n              variant=\"inline\"\n              format=\"MM/dd/yyyy\"\n              margin=\"normal\"\n              id=\"date-picker-inline\"\n              label=\"Date\"\n              name=\"activeEventDate\"\n              value={date}\n              onChange={(date) => {\n                handleChangeModal(date, 'activeEventDate');\n              }}\n            />\n          </Grid>\n          <Grid container item xs={12} spacing={3}>\n            <TimePicker\n              margin=\"normal\"\n              id=\"time-picker=start\"\n              label=\"Event start\"\n              name=\"activeEventStartTime\"\n              value={startTime}\n              onChange={(time) => {\n                handleChangeModal(time, 'activeEventStartTime');\n              }}\n            />\n          </Grid>\n          <Grid container item xs={12} spacing={3}>\n            <TimePicker\n              margin=\"normal\"\n              id=\"time-picker-end\"\n              label=\"Event end\"\n              name=\"activeEventEndTime\"\n              value={endTime}\n              onChange={(time) => {\n                const checkedEndTime = time && time <= startTime ? startTime : time;\n                handleChangeModal(checkedEndTime, 'activeEventEndTime');\n              }}\n            />\n          </Grid>\n          <Grid item xs={12} spacing={3} container direction=\"row\" alignItems=\"center\">\n            <label htmlFor=\"color-input\" className=\"modal__input-label\">\n              Pick event's color\n            </label>\n            <input\n              id=\"color-input\"\n              type=\"color\"\n              name=\"activeEventColor\"\n              value={color}\n              onChange={(evt) => {\n                handleChangeModal(evt.target.value, 'activeEventColor');\n              }}\n            />\n          </Grid>\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onSuccess} color=\"primary\">\n          Save\n        </Button>\n        <Button onClick={onDelete} color=\"secondary\">\n          Delete\n        </Button>\n        <Button onClick={onCloseModal} color=\"default\">\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default Modal;\n","const uiqueID = () => {\n  return '_' + Math.random().toString(36).substr(2, 9);\n};\n\nexport default uiqueID;\n","import * as React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport { EventInput } from '@fullcalendar/core';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction'; // needed for dayClick\n\nimport './App.scss';\n\nimport Modal from './components/Modal';\nimport uniqueId from './helpers/uniqueId';\n\nimport ModalMode from './interfaces/ModalMode';\n\ninterface BaseCalendarState {\n  calendarEvents: EventInput[];\n  showEventModal: boolean;\n  modalMode: ModalMode;\n}\n\ninterface ActiveEventState {\n  activeEventId: number;\n  activeEventTitle: string;\n  activeEventStartTime: Date | string;\n  activeEventDate: Date | string;\n  activeEventEndTime: Date | string;\n  activeEventColor: string;\n}\n\ninterface CalendarState extends BaseCalendarState, ActiveEventState {}\n\nconst INITIAL_ACTIVE_EVENT_STATE: Readonly<ActiveEventState> = Object.freeze({\n  activeEventId: 0,\n  activeEventTitle: '',\n  activeEventStartTime: new Date(),\n  activeEventEndTime: new Date(),\n  activeEventDate: new Date(),\n  activeEventColor: '#3788d8',\n});\n\nexport default class Calendar extends React.Component<{}, CalendarState> {\n  calendarComponentRef = React.createRef<FullCalendar>();\n\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      calendarEvents: [],\n      showEventModal: false,\n      modalMode: ModalMode.CREATE,\n      ...INITIAL_ACTIVE_EVENT_STATE,\n    };\n  }\n\n  handleModalFieldChange = (val: string | Date, name: string) => {\n    if (name === 'activeEventDate') {\n      this.setState({ activeEventEndTime: val, activeEventStartTime: val });\n    }\n    this.setState((prevState) => ({\n      ...prevState,\n      [name]: val,\n    }));\n  };\n\n  addEvent = () => {\n    const evtObj = {\n      id: uniqueId(),\n      title: this.state.activeEventTitle,\n      start: this.state.activeEventStartTime,\n      end: this.state.activeEventEndTime,\n      backgroundColor: this.state.activeEventColor,\n    };\n    this.setState({ calendarEvents: this.state.calendarEvents.concat(evtObj) });\n  };\n\n  deleteEvent = async () => {\n    const evt = this.state.calendarEvents.find((el) => el.id === this.state.activeEventId);\n    const newArr = this.state.calendarEvents.filter((el) => el.id !== evt!.id);\n    await this.setState({ calendarEvents: newArr });\n  };\n\n  editEvent = async () => {\n    const evtObj = {\n      id: this.state.activeEventId,\n      title: this.state.activeEventTitle,\n      start: this.state.activeEventStartTime,\n      end: this.state.activeEventEndTime,\n      color: this.state.activeEventColor,\n    };\n    await this.deleteEvent();\n    this.setState({ calendarEvents: this.state.calendarEvents.concat(evtObj) });\n  };\n\n  clearActiveEventState = () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      ...INITIAL_ACTIVE_EVENT_STATE,\n    }));\n  };\n\n  closeModal = () => {\n    this.setState({ showEventModal: false });\n  };\n\n  showModal = () => {\n    this.setState({ showEventModal: true });\n  };\n\n  submitModal = () => {\n    if (this.state.modalMode === ModalMode.EDIT) {\n      this.editEvent();\n      this.closeModal();\n      this.clearActiveEventState();\n      return;\n    }\n    this.addEvent();\n    this.closeModal();\n    this.clearActiveEventState();\n  };\n\n  submitDeleteModal = () => {\n    this.closeModal();\n    this.deleteEvent();\n    this.clearActiveEventState();\n  };\n\n  handleDateClick = (arg: any) => {\n    this.setState({\n      modalMode: ModalMode.CREATE,\n      activeEventDate: arg.date,\n      activeEventStartTime: arg.date,\n      activeEventEndTime: arg.date,\n    });\n    this.showModal();\n  };\n\n  handleEventClick = (evtObj: any) => {\n    const { title, start, end, id, backgroundColor } = evtObj.event;\n    this.setState({\n      modalMode: ModalMode.EDIT,\n      activeEventId: id,\n      activeEventTitle: title,\n      activeEventDate: start,\n      activeEventStartTime: start,\n      activeEventEndTime: end,\n      activeEventColor: backgroundColor,\n    });\n    this.showModal();\n  };\n\n  render() {\n    return (\n      <main className=\"main\">\n        <FullCalendar\n          defaultView=\"dayGridMonth\"\n          height={900}\n          header={{\n            left: 'prev,next today',\n            center: 'title',\n            right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek',\n          }}\n          plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n          ref={this.calendarComponentRef}\n          events={this.state.calendarEvents}\n          dateClick={this.handleDateClick}\n          eventClick={this.handleEventClick}\n          editable={true}\n        />\n        <Modal\n          mode={this.state.modalMode}\n          showModal={this.state.showEventModal}\n          title={this.state.activeEventTitle}\n          startTime={this.state.activeEventStartTime}\n          date={this.state.activeEventDate}\n          endTime={this.state.activeEventEndTime}\n          color={this.state.activeEventColor}\n          onCloseModal={this.closeModal}\n          onDelete={this.submitDeleteModal}\n          onSuccess={this.submitModal}\n          handleChangeModal={this.handleModalFieldChange}\n        />\n      </main>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\n\nReactDOM.render(\n  <MuiPickersUtilsProvider utils={DateFnsUtils}>\n    <App />\n  </MuiPickersUtilsProvider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}